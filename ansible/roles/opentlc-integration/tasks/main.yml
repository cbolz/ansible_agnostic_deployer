# vim: set ft=ansible:
---
- name: Create users
  user:
    name: "{{ item.name }}"
    home: "{{ item.home }}"
  with_items: "{{ mgr_users }}"

- name: Install packages
  yum:
    name: "{{ item }}"
  with_items:
    - git
    - python-boto

- name: Get updated files from git repository github.com/sborenst/ansible_agnostic_deployer
  git:
    repo: "https://github.com/sborenst/ansible_agnostic_deployer.git"
    dest: "{{ item.home }}/ansible_agnostic_deployer"
    force: yes
  with_items: "{{ mgr_users }}"

- name: Check if OPEN_Admin.tar.gz repo exists in the current dir (manual upload)
  delegate_to: localhost
  stat:
    path: "{{ ANSIBLE_REPO_PATH }}/OPEN_Admin.tar.gz"
  register: openadmin_archive
  become: false

- name: Copy and unarchive OPEN_Admin.tar.gz repo from local. Do not copy if already present remotely.
  unarchive:
    src: "{{ ANSIBLE_REPO_PATH }}/OPEN_Admin.tar.gz"
    dest: "{{ item.home }}/"
    creates: "{{ item.home }}/OPEN_Admin"
  when:
    - openadmin_archive.stat.exists
    - item.open_admin is defined
    - item.open_admin == True
  with_items: "{{ mgr_users }}"

- name: Get updated files from git repository github.com/redhat-gpe/OPEN_Admin.git
  git:
    repo: "https://{{ item.github.user }}:{{ item.github.password }}@github.com/redhat-gpe/OPEN_Admin.git"
    dest: "{{ item.home }}/OPEN_Admin"
    force: yes
  when:
    - item.github is defined
    - item.github.user is defined
    - item.github.password is defined
    - not openadmin_archive.stat.exists
    - item.open_admin is defined
    - item.open_admin == True
  with_items: "{{ mgr_users }}"

- name: No OPEN_Admin repo available for user
  fail:
    msg: "User {{ item.name }}: You need to either provide github.user/github.password to fetch OPEN_Admin repo from the provisioner or provide {{ ANSIBLE_REPO_PATH }}/OPEN_Admin.tar.gz to be uploaded (recommended). Caution: github credentials will be readable on the provisioner if you choose the first option."
  when:
    - not openadmin_archive.stat.exists
    - item.github is not defined
    - item.open_admin is defined
    - item.open_admin == True
  with_items: "{{ mgr_users }}"

- name: Set permissions for directories ansible_agnostic_deployer
  file:
    path: "{{ item.home }}/ansible_agnostic_deployer"
    state: directory
    owner: "{{ item.name }}"
    recurse: yes
    group: "{{ item.name }}"
    mode: 0770
  with_items: "{{ mgr_users }}"

- name: Set permissions for directories OPEN_Admin
  file:
    path: "{{ item.home }}/OPEN_Admin"
    state: directory
    owner: "{{ item.name }}"
    recurse: yes
    group: "{{ item.name }}"
    mode: 0770
  when:
    - item.open_admin is defined
    - item.open_admin == True
  with_items: "{{ mgr_users }}"

- name: Create ~/bin
  file:
    path: "{{ item.home }}/bin"
    state: directory
  with_items: "{{ mgr_users }}"

# these symlinks are usually specific (bastion, ansible-provisionner, etc)
- name: Create symlinks to ~/bin
  file:
    path: "{{item.0.home }}/{{ item.1.path }}"
    src: "{{item.0.home }}/{{ item.1.src }}"
    state: link
  with_subelements:
    - "{{ mgr_users }}"
    - symlinks
    - flags:
        skip_missing: True

- name: add authorized_keys
  authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
  with_subelements:
    - "{{ mgr_users }}"
    - authorized_keys

- file:
    path: "{{ item.home }}/deployer_logs"
    state: directory
    owner: "{{ item.name }}"
    recurse: yes
  with_items: "{{ mgr_users }}"
